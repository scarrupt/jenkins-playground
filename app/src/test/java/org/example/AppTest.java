/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import com.hazelcast.client.HazelcastClient;
import com.hazelcast.client.config.ClientConfig;
import com.hazelcast.core.HazelcastInstance;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;
import org.testcontainers.DockerClientFactory;
import org.testcontainers.containers.GenericContainer;
import org.testcontainers.containers.Network;
import org.testcontainers.utility.DockerImageName;

import java.util.concurrent.BlockingQueue;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.*;
import static org.testcontainers.utility.DockerImageName.*;

class AppTest {

    private static final String HZ_IMAGE_NAME = "hazelcast/hazelcast:5.2.0-slim";

    private static final String TEST_VALUE = "Hello!";

    private static final String HOST_PORT_SEPARATOR = ":";

    private static final String TEST_QUEUE_NAME = "test-queue";
    private static final int DEFAULT_EXPOSED_PORT = 5701;

    @Test void appHasAGreeting() {
        Network network = Network.builder().createNetworkCmdModifier(
                createNetworkCmd -> DockerClientFactory.instance().client().createNetworkCmd()
                        .withName("testcontainers")).build();
        try (
                GenericContainer<?> container = new GenericContainer<>(parse(HZ_IMAGE_NAME))
                        .withExposedPorts(DEFAULT_EXPOSED_PORT)
                        .withNetwork(network)
        ) {
            container.start();
            assertThat(container.isRunning()).isTrue();

            ClientConfig clientConfig = new ClientConfig();
            clientConfig
                    .getNetworkConfig()
                    .addAddress(container.getHost() + HOST_PORT_SEPARATOR + container.getFirstMappedPort());
            HazelcastInstance client = HazelcastClient.newHazelcastClient(clientConfig);

            BlockingQueue<String> queue = client.getQueue(TEST_QUEUE_NAME);
            queue.put(TEST_VALUE);
            assertThat(queue.take()).isEqualTo(TEST_VALUE);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new RuntimeException("Interrupted during singleHazelcastContainer test", e);
        }
    }

    @AfterEach
    void cleanUp() {
        HazelcastClient.shutdownAll();
    }
}
